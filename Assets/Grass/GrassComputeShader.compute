// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Transform
{
    float3 worldPosition;
    float3x3 rotation;
    float windFactor;
    float width;
    float height;
};

AppendStructuredBuffer<Transform> _GrassTransforms;
RWStructuredBuffer<float2> _GrassWindValues;
Texture2D<float> _AmbientWindMap;
Texture2D<float3> _FluidMap;

uniform StructuredBuffer<float4> _TerrainBuffer;
uniform float _TerrainBufferWidth;
uniform float _TerrainSize;
uniform float3 _TerrainCenter;

float _DeltaTime;
float _RandomSeed;

float2 _AmbientWindMapSize;
float2 _FluidMapSize;
float3 _AmbientWindCenter;
float _AmbientWindSize;
float _AmbientWindStrength;
float _WindDissipation;
float2 _AmbientWindDirection;
float _FluidMapWindStrength;

float3 _TileCenter;
float _TileSize;
float _TileDensity;
float _TrueGrassCount;
float _GrassOffsetStrength;
float4 _GrassScalingRange;

float2 _GrassDefaultFacing;
float _GrassFacingRandomness;
float _GrassTilt;

//random value generator 2d to 2d
//https://www.shadertoy.com/view/XlGcRh
uint2 pcg2d(uint2 v)
{
    v = v * 1664525u + 1013904223u;

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v>>16u);

    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;

    v = v ^ (v>>16u);

    return v;
}

float SampleAmbientWindBilepr(float3 grassPos)
{
    float2 texUV = ((grassPos - _AmbientWindCenter).xz / _AmbientWindSize) + 0.5;
    float2 pos = texUV * _AmbientWindMapSize; 
    int2 floorPos = pos;
    float2 blend = pos - floorPos;

    float xL = _AmbientWindMap[(floorPos)];
    float xR = _AmbientWindMap[(floorPos + int2(1, 0))];
    float xB = _AmbientWindMap[(floorPos + int2(0, 1))];
    float xT = _AmbientWindMap[(floorPos + int2(1, 1))];
    
    float col_x = lerp(xL, xR, blend.x);
    float col_y = lerp(xB, xT, blend.x);
    return lerp(col_x, col_y, blend.y);
}

float3 SampleFluidMapWindBilepr(float3 grassPos)
{
    float2 texUV = ((grassPos - _AmbientWindCenter).xz / _AmbientWindSize) + 0.5;
    float2 pos = texUV * _FluidMapSize; 
    int2 floorPos = pos;
    float2 blend = pos - floorPos;

    float3 xL = _FluidMap[(floorPos)];
    float3 xR = _FluidMap[(floorPos + int2(1, 0))];
    float3 xB = _FluidMap[(floorPos + int2(0, 1))];
    float3 xT = _FluidMap[(floorPos + int2(1, 1))];
    
    float3 col_x = lerp(xL, xR, blend.x);
    float3 col_y = lerp(xB, xT, blend.x);
    return lerp(col_x, col_y, blend.y);
}

float easeOutOffset(float x, float power, float offset)
{
    return (1.0 - offset) * (1 - pow(1 - x, power)) + offset;
}

int getPosBufferIndex(int2 id)
{
    return id.x + id.y * _TerrainBufferWidth;
}

float4 SampleTerrainBufferBilerp(float2 posXZ)
{
    float2 uv = ((posXZ - _TerrainCenter.xz) / _TerrainSize) + 0.5;
    float2 texelPos = uv * _TerrainBufferWidth;
    int2 floorPos = texelPos;
    float2 blend = texelPos - floorPos;

    float4 xL = _TerrainBuffer[getPosBufferIndex(floorPos)];
    float4 xR = _TerrainBuffer[getPosBufferIndex(floorPos + int2(1.0, 0.0))];
    float4 xB = _TerrainBuffer[getPosBufferIndex(floorPos + int2(0.0, 1.0))];
    float4 xT = _TerrainBuffer[getPosBufferIndex(floorPos + int2(1.0, 1.0))];
                
    float4 col_x = lerp(xL, xR, blend.x);
    float4 col_y = lerp(xB, xT, blend.x);
    //return xR;
    return lerp(col_x, col_y, blend.y);
}

float3x3 getTiltRotation(float2 tiltDir)
{
    //negate angle for LHR
    float angle = atan2(tiltDir.y, tiltDir.x);
    float sina, cosa;
    sincos(angle, sina, cosa);
    return  float3x3(
        1, 0, 0,
        0, cosa, -sina,
        0, sina, cosa);
}

float3x3 getFacingRotation(float2 facingDir)
{
    //negate angle for LHR
    float angle = -atan2(-facingDir.x, facingDir.y);
    float sina, cosa;
    sincos(angle, sina, cosa);
    return  float3x3(
        cosa, 0, sina,
        0, 1, 0,
        -sina, 0, cosa);
}


[numthreads(16,16,1)]
void CSMain (uint2 id : SV_DispatchThreadID, uint2 groupID : SV_GroupThreadID)
{
    Transform newTransform;

    float2 pos = id.xy / (_TileDensity - 1);
    float2 randomPos = (pcg2d(id) % 100) / 100.0;
    float2 idPos = (pos.xy * 2 - 1) * (_TileSize * 0.5) + (randomPos * _GrassOffsetStrength);
    newTransform.worldPosition = float3(idPos.x, 0, idPos.y);

    float2 randomRot = (pcg2d(id*73) % 100) / 100.0;
    float2 randomFacing = normalize(randomRot * 2.0 - 1.0);
    float2 facing = lerp(_GrassDefaultFacing, randomFacing, _GrassFacingRandomness);

    int bufferIndex = id.x + id.y * _TileDensity;
    float2 ambientWind = _AmbientWindDirection * SampleAmbientWindBilepr(newTransform.worldPosition);
    float3 fluidSample = SampleFluidMapWindBilepr(newTransform.worldPosition);
    float2 fluidMapWind = fluidSample.xy * fluidSample.z;
    
    float windFacingDot = dot(facing, ambientWind);
    float fluidFacingDot = dot(facing, fluidMapWind);

    _GrassWindValues[bufferIndex] *= lerp(_WindDissipation, 1.0, abs(windFacingDot) + abs(fluidFacingDot));
    _GrassWindValues[bufferIndex].x += sign(windFacingDot) * easeOutOffset(abs(windFacingDot), 4, 0.3) * _AmbientWindStrength * 0.01;
    _GrassWindValues[bufferIndex].x += sign(fluidFacingDot) * easeOutOffset(abs(fluidFacingDot), 4, 0.3) * _FluidMapWindStrength * 0.1;

    
    if (id.x >= _TileDensity || id.y >= _TileDensity)
        return;

    float tiltValue = _GrassTilt + _GrassWindValues[bufferIndex].x * 0.05;
    float4 terrainSample = SampleTerrainBufferBilerp(_TileCenter.xz + newTransform.worldPosition.xz);

    newTransform.worldPosition.y = terrainSample.w;
    
    //float3 up = terrainSample.xyz;
    // float3 forward = float3(0,0,1);
    // float3 right = normalize(cross(up, forward));
    // forward = cross(right, up);
    // float3x3 rotMatrix = float3x3(right, up, forward);
    // float3x3 tiltedNormal = mul(tiltRotMat, rotMatrix);
    float3x3 tiltRotMat = getTiltRotation(float2(1.0 - abs(tiltValue), tiltValue));
    float3x3 facingRotMat = getFacingRotation(facing);
    newTransform.rotation = mul(facingRotMat, tiltRotMat);
    
    float2 randomScaling = (pcg2d(id*57) % 100) / 100.0;
    newTransform.width = lerp(_GrassScalingRange.x, _GrassScalingRange.y, randomScaling.x);
    newTransform.height = lerp(_GrassScalingRange.z, _GrassScalingRange.w, randomScaling.y);
   
    newTransform.windFactor = _GrassWindValues[bufferIndex].x;
    
    _GrassTransforms.Append(newTransform);
}

#pragma kernel BlitWindValuesToTex

RWTexture2D<float2> _WindValuesTexture;

[numthreads(16,16,1)]
void BlitWindValuesToTex (uint2 id : SV_DispatchThreadID, uint2 groupID : SV_GroupThreadID)
{
    int bufferIndex = id.x + id.y * _TileDensity;
    _WindValuesTexture[id] = _GrassWindValues[bufferIndex];
}